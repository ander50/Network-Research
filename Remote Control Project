#!/bin/bash

# STUDENT NAME AND CODE: UDO, ANDERSON ISONG - S2
# PROJECT: REMOTE CONTROL - NETWORK RESEARCH

# VISION AND MISSION: Cyber units operating in an automated way and communicating with a remote server and executing automatic tasks anonymously.

# STRATEGY: Creating automation that would let cyber units execute commands on their local devices but would be executed by the remote server.

# OBJECTIVES: Connecting to the remote server should be automated and automations on the remote server should include: I. Scanning targets
#               II. Getting information (Whois)

# QUESTIONS
# 1.1 Install the needed applications
# 1.2 If the applications are already installed, donâ€™t install them again
# Tor installation
if command -v tor &> /dev/null;
then
echo "[*]  You have Tor installed already"
else
echo "[-] You need to install Tor"
sleep 5
echo "[+] Installation in progress"
sudo apt-get install -y tor
fi  

# git installation
if command -v git &> /dev/null;
then
echo "[*]  You have git installed already"
else
echo "[-] You need to install git"
sleep 5
echo "[+] Installation in progress"
sudo apt-get install -y git
fi  

# Torify installation
if command -v torsocks &> /dev/null;
then
echo "[*]  You have Torify installed already"
else
echo "[-] You need to install Torify"
sleep 5
echo "[+] Installation in progress"
sudo apt-get install -y tor torsocks
fi


# Geoip-bin installation
if command -v tor &> /dev/null;
then
echo "[*]  You have geoip-bin installed already"
else
echo "[-] You need to install geoip-bin"
sleep 5
echo "[+] Installation in progress"
sudo apt-get install -y geoip-bin
sudo yum install -y geoip
fi

# sshpass installation
if command -v sshpass &> /dev/null;
then
echo "[*]  You have sshpass installed already"
else
echo "[-] You need to install sshpass"
sleep 5
echo "[+] Installation in progress"
sudo apt-get install -y sshpass
fi

# Nipe installation
if command -v tor &> /dev/null;
then
echo "[*]  You have nipe installed already"
else
echo "[-] You need to install nipe"
sleep 5
echo "[+] Installation in progress"
clone https://github.com/htrgouvea/nipe.git
sudo cpan install Try::Tiny Config::Simple JSON
sudo perl nipe.pl install
sudo apt-get install -y tor iptables perl
fi

# 1.3 Check if the network connection is anonymous; if not, alert the user and exit
# 1.4 If the network connection is anonymous, display the spoofed country name

Public_ip=$(curl -s ifconfig.me)

if [ -z "$(whois $Public_ip | grep -i country | grep NG)" ]; then
    Country=$(whois $Public_ip | grep -i country)
    echo "You are not anonymous! Exit"
    exit
else
    Spoofed_Country=$(geoiplookup $Public_ip | awk '{print $4}' | sed 's/,//g')
    echo "You are ANONYMOUS - Spoofed Country: $Spoofed_Country"
fi

# 1.5 Allow the user to specify the address to scan via remote server; save into a variable
# 2.1 Display the details of the remote server (country, IP, and Uptime)
# 2.2 Get the remote server to check the Whois of the given address
# 2.3 Get the remote server to scan for open ports on the given address
# 3.1 Save the Whois and Nmap data into files on the local computer
# 3.2 Create a log and audit your data collecting

# Remote Server Details and Log details

echo "{@] $(date) - Running NR code" >> Net_Res.log

IP=192.168.60.133

echo "[*] Performing whois for the vulnerable machine"
if sshpass -p "kali" ssh -o StrictHostKeyChecking=no kali@$IP "whois 192.168.60.132 && uptime" >> made.txt; then
        
    # Extracting country, net range, and uptime while removing duplicates
    country=$(grep -i "Country:" made.txt | grep -oP '(?<=Country:\s).+' | sort -u)
    net_range=$(grep -i "NetRange:" made.txt | grep -oP '(?<=NetRange:\s).+' | sort -u)
    uptime=$(tail -n 2 made.txt | grep -v '^$' | head -n 1)
    
    echo "[*] uptime: $uptime"
    echo "[*] Country: $country"
    echo "[*] Net Range: $net_range"
    
    echo "[+] whois command for the vulnerable machine executed successfully."
else
    echo "[-] Failed to execute whois command for the vulnerable machine."
fi

echo "[*} Performing nmap scan for the vulnerable machine"
if sshpass -p "kali" ssh -o StrictHostKeyChecking=no kali@$IP "nmap 192.168.60.132 -p- -sV" >> nmap.txt ; then
    echo "[+] Nmap scan for the vulnerable machine executed successfully."
else
    echo "[-] Failed to execute Nmap scan for the vulnerable machine."
fi
